name: Playwright E2E

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      NODE_OPTIONS: "--experimental-vm-modules"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache root node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-root-node-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-root-node-

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json', 'server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install root dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Cache server node modules
        uses: actions/cache@v4
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-node-${{ hashFiles('server/package-lock.json', 'server/package.json') }}
          restore-keys: |
            ${{ runner.os }}-server-node-

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Run server unit tests
        working-directory: ./server
        run: |
          # Run server unit tests with Node experimental VM modules enabled so Mocha
          # can load ESM-only dependencies without ERR_REQUIRE_ESM on the runner.
          # This is a minimal, low-risk change to the CI environment.
          set -euo pipefail
          echo "Running server unit tests (mocha)"
          NODE_OPTIONS="--experimental-vm-modules" \
            node ./node_modules/.bin/mocha --recursive --reporter spec

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start backend and static server (background)
        run: |
          set -euo pipefail
          # Start backend and log to /tmp/backend.log
          node ./server/index.js > /tmp/backend.log 2>&1 &
          echo "$!" > /tmp/backend.pid
          # Start static server on the agreed port (8001) and log to /tmp/static.log
          python3 -m http.server 8001 > /tmp/static.log 2>&1 &
          echo "$!" > /tmp/static.pid
          # Wait for services to respond (increase retries for flaky runners)
          for i in {1..60}; do
            if curl -sSf http://localhost:4000/api/leaderboard >/dev/null 2>&1 && curl -sSf http://localhost:8001/standalone.html >/dev/null 2>&1; then
              echo "services are up"; break
            fi
            sleep 2
          done

      - name: Run Playwright via runner script
        run: node ./scripts/run-playwright-with-backend.js

      - name: Upload Playwright artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: |
            test-results/**
            playwright-report/**
            trace.zip
            ./playwright-traces/**
            ./playwright-screenshots/**
            /tmp/backend.log
            /tmp/static.log
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          if [ -f /tmp/backend.pid ]; then kill "$(cat /tmp/backend.pid)" || true; fi
          if [ -f /tmp/static.pid ]; then kill "$(cat /tmp/static.pid)" || true; fi
