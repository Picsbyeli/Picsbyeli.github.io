name: Nightly Deep Property Tests

on:
  schedule:
    - cron: '0 2 * * *' # At 02:00 UTC every day
  workflow_dispatch: {}

jobs:
  deep-property-tests:
    runs-on: ubuntu-latest
    concurrency:
      group: nightly-deep-property-tests
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache server node modules
        uses: actions/cache@v4
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-node-modules-${{ hashFiles('server/package-lock.json', 'server/package.json') }}
          restore-keys: |
            ${{ runner.os }}-server-node-modules-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install server dependencies
        working-directory: server
        run: |
          npm ci --prefer-offline --no-audit --no-fund

      - name: Run server tests (deep property runs)
        working-directory: server
        env:
          FAST_CHECK_RUNS: '2000'
          CI: 'true'
        run: |
          set -euo pipefail
          echo "Running deep server tests with experimental VM modules"
          NODE_OPTIONS="--experimental-vm-modules" node ./node_modules/.bin/mocha --recursive --reporter spec

      - name: Prepare rotated moderation logs archive
        id: prepare-archive
        if: ${{ secrets.MODERATION_S3_BUCKET != '' && (secrets.AWS_ACCESS_KEY_ID != '' || secrets.AWS_ROLE_TO_ASSUME != '') }}
        run: |
          set -euo pipefail
          LOGS=(server/moderation.log.*)
          FOUND=0
          for f in "${LOGS[@]}"; do
            if [ -e "$f" ]; then FOUND=1; break; fi
          done
          if [ "$FOUND" -eq 0 ]; then echo "No rotated logs found, skipping upload"; exit 0; fi
          ARCHIVE=rotated-moderation-logs-$(date -u +%Y%m%dT%H%M%SZ).tar.gz
          tar -czf "$ARCHIVE" server/moderation.log.* || true
          echo "ARCHIVE=$ARCHIVE" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials via OIDC (assume role)
        if: ${{ secrets.MODERATION_S3_BUCKET != '' && secrets.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}

      - name: Configure AWS credentials via access keys (fallback)
        if: ${{ secrets.MODERATION_S3_BUCKET != '' && secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_ROLE_TO_ASSUME == '' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}

      - name: Upload rotated moderation logs to S3
        if: ${{ secrets.MODERATION_S3_BUCKET != '' && (secrets.AWS_ROLE_TO_ASSUME != '' || (secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '')) }}
        run: |
          set -euo pipefail
          ARCHIVE="${{ steps.prepare-archive.outputs.ARCHIVE }}"
          if [ -z "$ARCHIVE" ] || [ ! -f "$ARCHIVE" ]; then echo "Archive $ARCHIVE not found or empty, skipping"; exit 0; fi
          aws s3 cp "$ARCHIVE" "s3://${{ secrets.MODERATION_S3_BUCKET }}/$ARCHIVE" --only-show-errors

      - name: Upload rotated moderation logs as artifact (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rotated-moderation-logs
          path: server/moderation.log.*
          retention-days: 30
